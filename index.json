[{"categories":null,"contents":"An open-source neural language technology platform supporting six fundamental Chinese NLP tasks: lexical analysis (Chinese word segmentation, part-of-speech tagging, and named entity recognition), syntactic parsing (dependency parsing), and semantic parsing (semantic dependency parsing and semantic role labeling). Unlike the existing state-of-the-art toolkits, such as Stanza, that adopt an independent model for each task, N-LTP adopts the multi-task framework by using a shared pre-trained model, which has the advantage of capturing the shared knowledge across relevant Chinese tasks. In addition, knowledge distillation where the single-task model teaches the multi-task model is further introduced to encourage the multi-task model to surpass its single-task teacher. Finally, we provide a collection of easy-to-use APIs and a visualization tool to make users easier to use and view the processing results directly. To the best of our knowledge, this is the first toolkit to support six Chinese NLP fundamental tasks.\n","permalink":"https://alongwy.top/projects/creations/ltp/","tags":["Python","Pytorch","NLP","Chinese"],"title":"Language Technology Platform"},{"categories":null,"contents":"An open-source neural language technology platform supporting six fundamental Chinese NLP tasks: lexical analysis (Chinese word segmentation, part-of-speech tagging, and named entity recognition), syntactic parsing (dependency parsing), and semantic parsing (semantic dependency parsing and semantic role labeling). Unlike the existing state-of-the-art toolkits, such as Stanza, that adopt an independent model for each task, N-LTP adopts the multi-task framework by using a shared pre-trained model, which has the advantage of capturing the shared knowledge across relevant Chinese tasks. In addition, knowledge distillation where the single-task model teaches the multi-task model is further introduced to encourage the multi-task model to surpass its single-task teacher. Finally, we provide a collection of easy-to-use APIs and a visualization tool to make users easier to use and view the processing results directly. To the best of our knowledge, this is the first toolkit to support six Chinese NLP fundamental tasks.\n","permalink":"https://alongwy.top/publications/ltp/","tags":["EMNLP","Python","Pytorch","NLP","Chinese"],"title":"N-LTP: A Open-source Neural Chinese Language Technology Platform with Pretrained Models"},{"categories":null,"contents":"This paper describes our submission system (HIT-SCIR) for the CoNLL 2020 shared task: Cross-Framework and Cross-Lingual Meaning Representation Parsing. The task includes five frameworks for graph-based meaning representations, i.e., UCCA, EDS, PTG, AMR, and DRG. Our solution consists of two sub-systems: transition-based parser for Flavor (1) frameworks (UCCA, EDS, PTG) and iterative inference parser for Flavor (2) frameworks (DRG, AMR). In the final evaluation, our system is ranked 3rd among the seven team both in Cross-Framework Track and Cross-Lingual Track, with the macro-averaged MRP F1 score of 0.81/0.69.\n","permalink":"https://alongwy.top/publications/hit-scir-at-mrp-2020-transition-based-parser-and-iterative-inference-parser/","tags":["ACL"],"title":"HIT-SCIR at MRP 2020: Transition-based Parser and Iterative Inference Parser"},{"categories":null,"contents":"NotCraft::NotFeed An RSS reader running entirely from your GitHub repo.\n Free hosting on GitHub Pages. No ads. No third party tracking. No need for backend. Content updates via GitHub Actions. Customizable layouts and styles via templating and theming API. Just bring your HTML and CSS. Free and open source. No third-party tracking.  How to use it? Github Pages   Use the NotFeed-Template generate your own repository.\n  In the repository root, open Config.toml file, click the \u0026ldquo;Pencil (Edit this file)\u0026rdquo; button to edit.\n  Remove # to uncommend the cacheUrl property, replace \u0026lt;github_username\u0026gt; with your GitHub username, and replace \u0026lt;repo\u0026gt; with your GitHub repo name.\n  In the sources, update the items to the sources you want to follow. The final content of the file should look similar to this:\nsite_title = \u0026#34;ArxivDaily\u0026#34; cache_max_days = 7 sources = [ \u0026#34;https://export.arxiv.org/rss/cs.CL\u0026#34; ] # proxy = \u0026#34;http://127.0.0.1:7890\u0026#34; ## Optional: default is None # statics_dir = \u0026#34;statics\u0026#34; ## Optional: default is \u0026#34;statics\u0026#34; # templates_dir = \u0026#34;includes\u0026#34; ## Optional: default is \u0026#34;includes\u0026#34; # cache_url = \u0026#34;https://GITHUB_USERNAME.github.io/REPO_NAME/cache.json\u0026#34; # minify = true # [scripts] # highlight = \u0026#34;scripts/highlight.rhai\u0026#34;   Scroll to the bottom of the page, click \u0026ldquo;Commit changes\u0026rdquo; button.\n  Once the rebuild finishes, your feed will be available at https://\u0026lt;github_username\u0026gt;.github.io/\u0026lt;repo\u0026gt;\n  Localhost   Clone the NotFeed-Template repository.\n  Edit Config.toml file.\n  Run notfeed\n build: notfeed build serve: notfeed serve --addr 127.0.0.1 --port 8080 or simply notfeed serve    Thanks  Inspired by osmos::feed  ","permalink":"https://alongwy.top/blog/notfeed/","tags":["RSS"],"title":"RSS Reader on GitHub"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://alongwy.top/search/","tags":null,"title":"Search Results"}]